package Lesson_3;

/**
 * Класс демонстрирует использование операторов управления потоком выполнения команд.
 */

public class Operators_part1 {

    /*
    Управляющие операторы в программе на Java можно разделить на следующие категории: операторы выбора, операторы
    цикла и операторы перехода. Операторы выбора позволяют выбирать разные ветви выполнения команд в соответствии с
    результатом вычисления заданного выражения или состоянием переменной. Операторы цикла позволяют повторять
    выполнение одного или нескольких операторов. Операторы перехода обеспечивают возможность нелинейного выполнения
    программы.
    В Java есть два оператора выбора: if и switch. Эти операторы позволяют управлять порядком выполнения команд в
    соответствии с условиями, которые известны только во время выполнения. С помощью оператора if можно направить
    выполнение программы по двум разным ветвям. Общая форма if выглядит следущим образом:
    if (условие) {
        оператор_1;
    } else {
        оператор_2;
    }
    Здесь под операторами понимается какой-либо блок кода, условие - это любое выражение, возвращающее значение типа
    boolean. Оператор else указывать необязательно, но если указывается,то должен быть один. Допускается использовать
    вложенный условный оператор if. То есть он может находится в одной из ветвей выполнения. Например,
    if (условие_1) {
        if  (условие_2) {
            оператор_3;
        } else {
            оператор_4;
        }
    } else {
        оператор_2;
    }
    Есть ещё одна конструкция, связанная с оператором if. Это if-else-if. Она позволяет проверять более
    одного условия. Общий синтаксис приведён ниже.
    if (условие_1) {
        оператор;
    } else if (условие_2) {
        оператор;
    } else if (условие_3) {
        оператор;
    } else if (условие_4) {
        оператор;
    } else {
        оператор;
    }

    Оператор switch позволяет направить поток исполнения команд по разным ветвям кода в зависимости от значения
    управляющего выражения. Общий синтаксис приведён ниже.
    switch (выражение) {
        case значение_1:
            {
                какие-либо действия;
                break;
            }
        case значение_2:
            {
                какие-либо действия;
                break;
            }
        case значение_3:
            {
                какие-либо действия;
                break;
            }
    }
    В строчке switch (выражение)... выражение должно возвращать тип byte, short, int, char, String или перечислимый тип.
    Каждое значение в операторе case должно иметь совместимый тип с выражением. Оператор break служит для прерывания
    последовательности в ветвях выбора switch. Также как и с if допускаются вложенные операторы switch.
     */

    public static void main(String[] args) {
        boolean a = true;
        boolean b = false;

        if (a == true) {
            System.out.println("Выполняется первая ветвь");
        } else {
            System.out.println("Выполняется вторая ветвь");
        }

        if (a) {
            if (!b) {
                System.out.println("вложенный оператор if");
            }
        }

        if (a) {
            System.out.println("1");
        } else if (!b) {
            System.out.println("2");
        } else if (a || b) {
            System.out.println("3");
        }

        int value = 3;
        switch (value) {
            case 1:
            {
                System.out.println("Значение равно 1");
                break;
            }
            case 2:
            {
                System.out.println("Значение равно 2");
                break;
            }
            case 3:
            {
                System.out.println("Значение равно 3");
                break;
            }
        }

    }

}
