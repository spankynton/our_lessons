package Lesson_3;


/**
 * Класс демонстрирует использование операторов управления потоком выполнения команд.
 */
public class Operators_part3 {

    /*
    В языке Java существует три оператора перехода: break, continue, return. Оператор break имеет три применения.
    Во-первых он завершает последовательность операторов в операторе switch. Во-вторых, его можно использовать для
    выхода из циклов for и while. В-третьих, этот оператор можно применять в качестве более безопасной формы оператора
    безусловного перехода goto.
    Использование оператора break в циклах приводит к их немедленному завершению, пропуская условное выражение и любой
    остальной код в теле цикла. Когда в теле цикла встречается оператор break, выполнение цикла прекращается и
    управление передаётся оператору, следующему за циклом. В случае вложенных циклов оператор break осуществляет выход
    только из наиболее глубоко вложенного внутреннего цикла. ВАЖНО! Следует понимать, что оператор break не предназначен
    в качестве обычного средства выхода из цикла. Для этого служит условное выражение в цикле! Это оператор следует
    использовать для выхода из цикла только в особых случаях!
    Оператор break также можно использовать для выхода из одного или нескольких блоков кода. Эти блоки не обязательно
    должны быть частью цикла или оператора switch, но могут быть любыми блоками кода. Более того, можно точно указать
    оператор, с которого будет продолжено выполнение программы, поскольку данная форма оператора break наделена метками.
    Общая форма break с меткой выглядит следующим образом:
    break метка;
    Чтобы пометить блок, достаточно поместить в его начале метку. Метка - это любой допустимый в Java идентификатор с
    двоеточием. Как только блок помечен, его метку можно использовать в качестве адресата для оператора break. В итоге
    выполнение программы будет продолжено с конца помеченного блока.
    Оператор continue используется когда необходимо начать повторение цикла с более раннего оператора в его теле.
    По существу, это означает непосредственный переход в конец цикла, минуя часть его тела. В циклах while и do-while
    оператор continue вызывает передачу управления непосредственноусловногму выражению, управляющему циклом. В цикле
    for управление передается вначале итерационной части цикла for, а затем условному выражению. Как и оператор break,
    оператор continue может содержать метку объемлющего цикла, который требуется продолжить.
    Оператор return служит для выполнения явного выхода из метода, т.е он снова передаёт управление коду, из которого
    был вызван данный метод. Этот оператор можно использовать в любом месте метода для возврата управления тому коду, из
    которого был вызван данный метод. Следовательно, return немедленно прекращает выполнение метода
     */

    public static void main(String[] args) {

        //Пример раннего выхода из цикла
        for (int i = 0; i < 11; i++) {
            System.out.println(i);
            if (i == 5) { //в случае елси значение переменной равно 5, то произойдёт выход из цикла
                break;
            }
        }

        //использование метки вместе с break
        boolean bool = true;
        first: { // метка first
            second: { // метка second
                third: { // метка third
                    System.out.println("вывод предшествует оператору break");
                    if (bool) {
                        break second;
                    }
                    System.out.println("этот вывод не будет показан");
                }
                System.out.println("этот вывод не будет показан");
            }
            System.out.println("вывод после блока second");
        }


        // Применение оператора continue
        // В этом примере на консоль будут выведены только нечётные числа
        int int_array[] = {1, 22, 43, 26, 54, 33, 85, 72, 91, 543, 395, 90};
        for (int i = 0; i < int_array.length; i++) {
            if (int_array[i]%2==0) { //если элемент массива является чётным числом, то дальнейшие действия в цилке не выполняются.
                continue;
            }
            System.out.println(int_array[i]);
        }

    }

}
